import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, CallbackQueryHandler, filters, CallbackContext
from button_handlers import *
import asyncio
from logger import LoggerConfig

# Instantiate LoggerConfig to configure logging
logger_config = LoggerConfig()
logger = logger_config.get_logger()

# Example usage of the logger
logger.info('This is an informational message')
logger.warning('This is a warning message')
logger.error('This is an error message')

# Define constants for command states
ADDING_ITEMS, FINISHED = range(2)

# Inline keyboard buttons
keyboard = [
    [InlineKeyboardButton("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data='new_order')],
]

async def start(update: Update, context: CallbackContext) -> None:
    context.user_data['items'] = []
    context.user_data['state'] = ADDING_ITEMS
    keyboard = [
        [InlineKeyboardButton("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data='new_order')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å PDF —Å —á–µ–∫–æ–º.",
            reply_markup=reply_markup
        )
    else:
        logger.warning("–ü—É—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ start")

async def button_handler(update: Update, context: CallbackContext) -> None:
    
    query = update.callback_query
    await query.answer()

    if query.data == 'new_order':
        
        await NewOrderHandler.new_order(update, context, query, ADDING_ITEMS)
        
    elif query.data == 'edit_item':
        
        await ItemEdition.item_edit(update, context)

    elif query.data == 'add_next_item':
        
        await AddNextItemHandler.add_next_item(context, query, ADDING_ITEMS)
        
    elif query.data == 'check_receipt':
        
        await CheckReceiptHandler.check_receipt(update, context, ADDING_ITEMS, FINISHED)
        
    elif query.data == 'back':
        
        await CheckReceiptHandler.back(update, context, ADDING_ITEMS)

    elif query.data == 'finish_receipt':
        
        await FinishReceiptHandler.finish_receipt(context, update, ADDING_ITEMS, FINISHED)
            
    elif query.data == 'cancel_order':
        
        await CancelOrderHandler.return_to_main_menu(update, context, keyboard)
        
async def handle_order(update: Update, context: CallbackContext) -> None:
    if context.user_data.get('state') == ADDING_ITEMS:
        try:
            parts = update.message.text.split(', ')
            item = {
                "N¬∫": int(parts[0]),
                "–¢–æ–≤–∞—Ä": parts[1],
                "–ö–æ–ª-–≤–æ": int(parts[2]),
                "–ï–¥.": parts[3],
                "–¶–µ–Ω–∞": float(parts[4]),
                "–°—É–º–º–∞": float(parts[5])
            }
            context.user_data['items'].append(item)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            message_text = (
                f"–ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n"
                f"N¬∫: {item['N¬∫']}\n"
                f"–¢–æ–≤–∞—Ä: {item['–¢–æ–≤–∞—Ä']}\n"
                f"–ö–æ–ª-–≤–æ: {item['–ö–æ–ª-–≤–æ']}\n"
                f"–ï–¥.: {item['–ï–¥.']}\n"
                f"–¶–µ–Ω–∞: {item['–¶–µ–Ω–∞']:.2f}‚ÇΩ\n"
                f"–°—É–º–º–∞: {item['–°—É–º–º–∞']:.2f}‚ÇΩ\n\n"
                "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É."
            )
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 1-2 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(1)
            await context.bot.delete_message(chat_id=update.message.chat_id, message_id=update.message.message_id)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = [
                [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –ü–æ–∑–∏—Ü–∏—è ‚è≠Ô∏è", callback_data='add_next_item')],
                [InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ü–æ–∑–∏—Ü–∏—é üìù", callback_data='edit_item')],
                [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ß–µ–∫ üîé", callback_data='check_receipt')],
                [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —á–µ–∫–∞ üßæ", callback_data='finish_receipt')],
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå", callback_data='cancel_order')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
            await update.message.reply_text(
                message_text,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {str(e)}")
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π.")

if __name__ == '__main__':
    application = ApplicationBuilder().token("7398191583:AAF2xkBbwcH0hsrBHsF0iEDgMt703u0ocO4").build()

    start_handler = CommandHandler('start', start)
    order_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_order)
    button_handler = CallbackQueryHandler(button_handler)

    application.add_handler(start_handler)
    application.add_handler(order_handler)
    application.add_handler(button_handler)

    application.run_polling()

