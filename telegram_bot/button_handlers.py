from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, CallbackQueryHandler, filters, CallbackContext


class NewOrderHandler:
    
    @staticmethod
    async def new_order(update: Update, context: CallbackContext, query, ADDING_ITEMS):
        
        context.user_data['items'] = []
        context.user_data['state'] = ADDING_ITEMS
        keyboard = [
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå", callback_data='cancel_order')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–¢–æ–≤–∞—Ä, –ö–æ–ª-–≤–æ, –¶–µ–Ω–∞,\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "Asus ROG Strix, 1, 1200.00\n",
            reply_markup=reply_markup
        )
        
class AddNextItemHandler:
    
    @staticmethod
    async def add_next_item(context: CallbackContext, query, update, ADDING_ITEMS):
        context.user_data['state'] = ADDING_ITEMS
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π üôè"
        async for message in context.bot.get_chat_history(chat_id=update.effective_chat.id):
            if message.text == "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π üôè":
                await message.delete()

        await query.edit_message_text(
            "–ü–æ–∑–∏—Ü–∏—è –£—Å–ø–µ—à–Ω–æ –î–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "N¬∫, –¢–æ–≤–∞—Ä, –ö–æ–ª-–≤–æ, –ï–¥., –¶–µ–Ω–∞, –°—É–º–º–∞\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "1, Asus ROG Strix, 1, –®—Ç., 1200.00, 1200.00\n"
        )
        
class FinishReceiptHandler:
    
    @staticmethod
    async def finish_receipt(context: CallbackContext, update: Update, ADDING_ITEMS, FINISHED):
        if context.user_data.get('state') == ADDING_ITEMS:
    
            context.user_data['state'] = FINISHED
            items = context.user_data.get('items', [])
            if not items:
                await update.callback_query.edit_message_text("–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.")
                return

            total_amount = sum(item['–°—É–º–º–∞'] for item in items)
            discount = 0.00  # –ü—Ä–∏–º–µ—Ä —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∫–∏–¥–∫–∏
            final_total = total_amount - discount

            # –°–æ–∑–¥–∞–Ω–∏–µ PDF –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∑–¥–µ—Å—å
            # ReceiptCreator.create_pdf("check113.pdf", items, total_amount, discount, final_total)

            order_summary = "–ß–µ–∫ —Å–æ–∑–¥–∞–Ω. –í–∞—à –∑–∞–∫–∞–∑:\n\n"
            for item in items:
                order_summary += f"{item['N¬∫']}, {item['–¢–æ–≤–∞—Ä']}, {item['–ö–æ–ª-–≤–æ']}, {item['–ï–¥.']}, {item['–¶–µ–Ω–∞']}, {item['–°—É–º–º–∞']}\n"
            order_summary += f"\n–í—Å–µ–≥–æ: {total_amount:.2f} ‚ÇΩ\n–°–∫–∏–¥–∫–∞: {discount:.2f} ‚ÇΩ\n–ò—Ç–æ–≥–æ: {final_total:.2f} ‚ÇΩ"
            
            keyboard = [
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå", callback_data='cancel_order')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.callback_query.edit_message_text(order_summary, reply_markup=reply_markup)
        else:
            await update.callback_query.edit_message_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π.")
            
            
class CancelOrderHandler:
    
    @staticmethod
    async def return_to_main_menu(update: Update, context: CallbackContext, keyboard) -> None:
        context.user_data.clear() 
        query = update.callback_query
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å PDF —Å —á–µ–∫–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        
class CheckReceiptHandler:
    
    @staticmethod
    async def check_receipt(update: Update, context: CallbackContext, ADDING_ITEMS, FINISHED) -> None:
        # Log current state for debugging
        current_state = context.user_data.get('state')
        
        if current_state == ADDING_ITEMS:
            context.user_data['state'] = FINISHED
            items = context.user_data.get('items', [])
            
            if not items:
                await update.callback_query.answer()
                await update.callback_query.message.reply_text("–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.")
                return

            total_amount = sum(item['–°—É–º–º–∞'] for item in items)
            discount = 0.00  # –ü—Ä–∏–º–µ—Ä —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∫–∏–¥–∫–∏
            final_total = total_amount - discount

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            order_summary = "–¢–µ–∫—É—â–∏–π —á–µ–∫ –ø–æ –∑–∞–∫–∞–∑—É:\n\n"
            for item in items:
                order_summary += f"{item['N¬∫']}, {item['–¢–æ–≤–∞—Ä']}, {item['–ö–æ–ª-–≤–æ']}, {item['–ï–¥.']}, {item['–¶–µ–Ω–∞']}, {item['–°—É–º–º–∞']}\n"
            order_summary += f"\n–í—Å–µ–≥–æ: {total_amount:.2f} ‚ÇΩ\n–°–∫–∏–¥–∫–∞: {discount:.2f} ‚ÇΩ\n–ò—Ç–æ–≥–æ: {final_total:.2f} ‚ÇΩ"
            
            keyboard = [
                [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —á–µ–∫–∞ üßæ", callback_data='finish_receipt')],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚è™", callback_data='back')],
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå", callback_data='cancel_order')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # Send the message with the receipt summary
            msg = await update.callback_query.message.reply_text(order_summary, reply_markup=reply_markup)
            
            # Store the sent message's message_id in user_data
            context.user_data['last_message_id'] = msg.message_id
        else:
            print('wtf')

    @staticmethod
    async def back(update: Update, context: CallbackContext, ADDING_ITEMS) -> None:
        # Get the current message_id from user_data
        current_message_id = context.user_data.get('last_message_id')

        if current_message_id:
            try:
                # Delete the current message using the bot's context
                await context.bot.delete_message(
                    chat_id=update.callback_query.message.chat_id,
                    message_id=current_message_id
                )
                # After deleting the message, reset the state to ADDING_ITEMS
                context.user_data['state'] = ADDING_ITEMS
                # Optionally, you can send a confirmation message or perform any other actions here
                await update.callback_query.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ø–æ–∑–∏—Ü–∏–π.")
            except Exception as e:
                print(f"Error deleting message: {e}")

        else:
            await update.callback_query.answer("–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            
class ItemEdition:
    
    @staticmethod
    async def item_edit(update: Update, context: CallbackContext, EDITING_ITEMS) -> None:
        context.user_data['state'] = EDITING_ITEMS
        query = update.callback_query
        await query.answer()
        
        try:
            # Access the Message object from the CallbackQuery
            message = query.message
            
            # Extract item details from the text of the message
            item_text = message.text
            parts = item_text.split('\n')
            item = {
                'N¬∫': int(parts[1].split(': ')[1]),
                '–¢–æ–≤–∞—Ä': parts[2].split(': ')[1],
                '–ö–æ–ª-–≤–æ': int(parts[3].split(': ')[1]),
                '–ï–¥.': parts[4].split(': ')[1],
                '–¶–µ–Ω–∞': float(parts[5].split(': ')[1].replace('‚ÇΩ', '').strip()),
                '–°—É–º–º–∞': float(parts[6].split(': ')[1].replace('‚ÇΩ', '').strip())
            }
            
            # Prepare inline keyboard to edit item details
            keyboard = [
                [InlineKeyboardButton(f"–ò–∑–º–µ–Ω–∏—Ç—å –¢–æ–≤–∞—Ä ({item['–¢–æ–≤–∞—Ä']})", callback_data='edit_name')],
                [InlineKeyboardButton(f"–ò–∑–º–µ–Ω–∏—Ç—å –ö–æ–ª-–≤–æ ({item['–ö–æ–ª-–≤–æ']})", callback_data='edit_qty')],
                [InlineKeyboardButton(f"–ò–∑–º–µ–Ω–∏—Ç—å –¶–µ–Ω–∞ ({item['–¶–µ–Ω–∞']:.2f}‚ÇΩ)", callback_data='edit_price')],
                [InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data='done_edit')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # Send message with inline keyboard for editing
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=reply_markup
            )
            
            # Store the item data in user_data for further processing
            context.user_data['edit_item'] = item
            
        except Exception as e:
            print(f"Error in item_edit: {e}")
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏.")
            
    
    @staticmethod
    async def edit_name(update: Update, context: CallbackContext) -> None:
        await update.callback_query.answer()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        await update.callback_query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        context.user_data['edit_action'] = 'edit_name'
        context.user_data['edit_message_id'] = update.callback_query.message.message_id
    
    
    @staticmethod
    async def edit_qty():
        pass
    
    
    @staticmethod
    async def edit_price():
        pass
    
    @staticmethod
    async def done_edit():
        pass



