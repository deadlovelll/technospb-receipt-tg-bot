import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, CallbackQueryHandler, filters, CallbackContext

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Define constants for command states
ADDING_ITEMS, FINISHED = range(2)

# Inline keyboard buttons
keyboard = [
    [InlineKeyboardButton("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data='new_order')],
    [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", callback_data='order_list')]
]

async def start(update: Update, context: CallbackContext) -> None:
    context.user_data['items'] = []
    context.user_data['state'] = ADDING_ITEMS
    keyboard = [
        [InlineKeyboardButton("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data='new_order')],
        [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", callback_data='order_list')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å PDF —Å —á–µ–∫–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    else:
        logger.warning("–ü—É—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ start")

async def button_handler(update: Update, context: CallbackContext) -> None:
    
    query = update.callback_query
    await query.answer()

    if query.data == 'new_order':
        
        context.user_data['items'] = []
        context.user_data['state'] = ADDING_ITEMS
        keyboard = [
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='cancel_order')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "N¬∫, –¢–æ–≤–∞—Ä, –ö–æ–ª-–≤–æ, –ï–¥., –¶–µ–Ω–∞, –°—É–º–º–∞\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "1, Asus ROG Strix, 1, –®—Ç., 1200.00, 1200.00\n",
            reply_markup=reply_markup
        )

    elif query.data == 'add_next_item':
        context.user_data['state'] = ADDING_ITEMS

        await query.edit_message_text(
            "–ü–æ–∑–∏—Ü–∏—è –£—Å–ø–µ—à–Ω–æ –î–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "N¬∫, –¢–æ–≤–∞—Ä, –ö–æ–ª-–≤–æ, –ï–¥., –¶–µ–Ω–∞, –°—É–º–º–∞\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "1, Asus ROG Strix, 1, –®—Ç., 1200.00, 1200.00\n"
        )

    elif query.data == 'finish_receipt':
        if context.user_data.get('state') == ADDING_ITEMS:
        
            context.user_data['state'] = FINISHED
            items = context.user_data.get('items', [])
            if not items:
                await update.callback_query.edit_message_text("–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.")
                return

            total_amount = sum(item['–°—É–º–º–∞'] for item in items)
            discount = 66.90  # –ü—Ä–∏–º–µ—Ä —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∫–∏–¥–∫–∏
            final_total = total_amount - discount

            # –°–æ–∑–¥–∞–Ω–∏–µ PDF –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∑–¥–µ—Å—å
            # ReceiptCreator.create_pdf("check113.pdf", items, total_amount, discount, final_total)

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            order_summary = "–ß–µ–∫ —Å–æ–∑–¥–∞–Ω. –í–∞—à –∑–∞–∫–∞–∑:\n\n"
            for item in items:
                order_summary += f"{item['N¬∫']}, {item['–¢–æ–≤–∞—Ä']}, {item['–ö–æ–ª-–≤–æ']}, {item['–ï–¥.']}, {item['–¶–µ–Ω–∞']}, {item['–°—É–º–º–∞']}\n"
            order_summary += f"\n–í—Å–µ–≥–æ: {total_amount:.2f} ‚ÇΩ\n–°–∫–∏–¥–∫–∞: {discount:.2f} ‚ÇΩ\n–ò—Ç–æ–≥–æ: {final_total:.2f} ‚ÇΩ"

            await update.callback_query.edit_message_text(order_summary)
        else:
            await update.callback_query.edit_message_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π.")

    elif query.data == 'order_list':
        items = context.user_data.get('items', [])
        if not items:
            await query.edit_message_text("–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.")
        else:
            order_summary = "–í–∞—à –∑–∞–∫–∞–∑:\n\n"
            for item in items:
                order_summary += f"{item['N¬∫']}, {item['–¢–æ–≤–∞—Ä']}, {item['–ö–æ–ª-–≤–æ']}, {item['–ï–¥.']}, {item['–¶–µ–Ω–∞']}, {item['–°—É–º–º–∞']}\n"
            await query.edit_message_text(order_summary)
            
    elif query.data == 'cancel_order':
        await return_to_main_menu(update, context)

async def return_to_main_menu(update: Update, context: CallbackContext) -> None:
    context.user_data.clear()  # –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    await start(update, context)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç–∞—Ä—Ç–∞

async def handle_order(update: Update, context: CallbackContext) -> None:
    if context.user_data.get('state') == ADDING_ITEMS:
        try:
            parts = update.message.text.split(', ')
            item = {
                "N¬∫": int(parts[0]),
                "–¢–æ–≤–∞—Ä": parts[1],
                "–ö–æ–ª-–≤–æ": int(parts[2]),
                "–ï–¥.": parts[3],
                "–¶–µ–Ω–∞": float(parts[4]),
                "–°—É–º–º–∞": float(parts[5])
            }
            context.user_data['items'].append(item)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            message_text = (
                f"–ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n"
                f"N¬∫: {item['N¬∫']}\n"
                f"–¢–æ–≤–∞—Ä: {item['–¢–æ–≤–∞—Ä']}\n"
                f"–ö–æ–ª-–≤–æ: {item['–ö–æ–ª-–≤–æ']}\n"
                f"–ï–¥.: {item['–ï–¥.']}\n"
                f"–¶–µ–Ω–∞: {item['–¶–µ–Ω–∞']:.2f}‚ÇΩ\n"
                f"–°—É–º–º–∞: {item['–°—É–º–º–∞']:.2f}‚ÇΩ\n\n"
                "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é, –Ω–∞–¥–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = [
                [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —á–µ–∫–∞ üßæ", callback_data='finish_receipt')],
                [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ß–µ–∫ üîé", callback_data='check_receipt')],
                [InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ü–æ–∑–∏—Ü–∏—é üìù", callback_data='edit_position')],
                [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –ü–æ–∑–∏—Ü–∏—è ‚è≠Ô∏è", callback_data='add_next_item')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                message_text,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {str(e)}")
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π.")

if __name__ == '__main__':
    application = ApplicationBuilder().token("7398191583:AAF2xkBbwcH0hsrBHsF0iEDgMt703u0ocO4").build()

    start_handler = CommandHandler('start', start)
    order_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_order)
    button_handler = CallbackQueryHandler(button_handler)

    application.add_handler(start_handler)
    application.add_handler(order_handler)
    application.add_handler(button_handler)

    application.run_polling()

